<?php
namespace  Incraigulous\AdminZone\Tests;

use DaveJamesMiller\Breadcrumbs\BreadcrumbsServiceProvider;
use DaveJamesMiller\Breadcrumbs\Facades\Breadcrumbs;
use Faker\Generator;
use Illuminate\Foundation\Testing\PendingCommand;
use Incraigulous\AdminZone\AdminZone;
use Incraigulous\AdminZone\AdminZoneServiceProvider;
use Incraigulous\AdminZone\Models\User;
use Incraigulous\AdminZone\Seeders\AdminZoneSeeder;
use Orchestra\Testbench\BrowserKit\TestCase as Base;
use Helmich\JsonAssert\JsonAssertions;
use Spatie\BladeX\BladeXServiceProvider;
use Tightenco\Ziggy\ZiggyServiceProvider;
/**
 * Class TestCase
 */
class TestCase extends Base
{
    use JsonAssertions;

    protected $callback;
    public $mockConsoleOutput = true;
    public $expectedOutput = [];
    public $expectedQuestions = [];

    protected function user()
    {
        return factory(User::class)->create();
    }

    public function actingAsUser()
    {
        return $this->actingAs($this->user());
    }
    /**
     * @var $faker Generator;
     */
    protected $faker;

    protected function getPackageAliases($app)
    {
        return [
            'config' => 'Illuminate\Config\Repository',
            'AZ' => AdminZone::class,
            'Breadcrumbs' => Breadcrumbs::class
        ];
    }

    protected function getPackageProviders($app)
    {
        return [
            AdminZoneServiceProvider::class,
            BladeXServiceProvider::class,
            BreadcrumbsServiceProvider::class,
            ZiggyServiceProvider::class
        ];
    }

    protected function getEnvironmentSetUp($app)
    {
        // Setup default database to use sqlite :memory:
        $app['config']->set('app.key', 'base64:la8jDWcqBHfGO6PR+OA9FAZqdi0XQKuhnzqc5tUATZs=');
        $app['config']->set('database.default', 'testing');
        $app['config']->set('database.connections.testing', [
            'driver'   => 'sqlite',
            'database' => ':memory:',
            'prefix'   => '',
        ]);
    }

    protected function setUp()
    {
        parent::setUp();
        \Route::get('/login', function() {

        })->name('login');

        $this->withFactories(__DIR__.'/../database/factories');
        foreach (glob(__DIR__.'/factories/*.php') as $filename)
        {
            require_once $filename;
        }
        $this->loadLaravelMigrations(['--database' =>  'testing']);
        $this->art('migrate', ['--database' => 'testing'])->run();
        $this->art('db:seed', ['--class' => AdminZoneSeeder::class]);

        $this->faker = \Faker\Factory::create();
        $this->callback = function($param = false) {
            $this->assertTrue($param);
            return $param;
        };
        AdminZone::reset();
    }

    protected function tearDown()
    {
        $this->addToAssertionCount(
            \Mockery::getContainer()->mockery_getExpectationCount()
        );
        \Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function art($command, $parameters = [])
    {
        if (! $this->mockConsoleOutput) {
            return $this->app[Kernel::class]->call($command, $parameters);
        }

        $this->beforeApplicationDestroyed(function () {
            if (count($this->expectedQuestions)) {
                $this->fail('Question "'.array_first($this->expectedQuestions)[0].'" was not asked.');
            }

            if (count($this->expectedOutput)) {
                $this->fail('Output "'.array_first($this->expectedOutput).'" was not printed.');
            }
        });

        return new PendingCommand($this, $this->app, $command, $parameters);
    }

    /**
     * Disable mocking the console output.
     *
     * @return $this
     */
    protected function withoutMockingConsoleOutput()
    {
        $this->mockConsoleOutput = false;

        $this->app->offsetUnset(OutputStyle::class);

        return $this;
    }
}
